plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
}

//构建时间
static def generateTime() {
    return new Date().format("yyyyMMddHHmm")
}

//kapt 是一个 Gradle 插件，用于处理 Kotlin 注解处理器，其中包括 kaptGenerateStubs 任务，它会生成 Kotlin 语言的桩代码。
//将 generateStubs = true 添加到 kapt 配置中，可以让 Gradle 在编译时生成 Kotlin 语言的桩代码，从而提高应用程序的性能和减少运行时开销。
kapt {
    generateStubs = true
}

android {
    compileSdk 33
    namespace 'com.zoo.xxx'

    defaultConfig {
        minSdk 23
        targetSdk 31

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }


    //多渠道配置
    flavorDimensions "appType"
    productFlavors {
        pro { // 正式版
            dimension "appType"
            applicationId "com.zoo.xxx"
            versionCode 1
            versionName "1.0.0"

            buildConfigField "boolean", "IS_DEV", "false"
            buildConfigField "String", "API_BASE_URL", "\"https://store.hongxinshop.com/prod-api/\""

            //修改 AndroidManifest.xml
            manifestPlaceholders = [app_name: "@string/app_name"]
        }
        dev { // 开发版
            dimension "appType"
            applicationId "com.zoo.xxx.dev"
            versionCode 1
            versionName "1.0.0"

            buildConfigField "boolean", "IS_DEV", "true"
            buildConfigField "String", "API_BASE_URL", "\"https://sit-store.hongxinshop.com:8443/prod-api/\""

            manifestPlaceholders = [app_name: "@string/app_name_dev"]
        }
    }

    //自定义打包名称
    android.applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "forkliftsys_${variant.productFlavors[0].name}_${buildType.name}_${versionName}_${generateTime()}.apk"
            //什么也不需要可以选择直接 "自定义name.apk"
            // variant.productFlavors[0].name 渠道名
            // buildType.name 代表构建类型（release/debug）
            // versionName 如下图中defaultConfig中的显示
        }
    }
    //创建一个名为keystorePropertiesFile的变量，并将其初始化为rootProject文件夹中的keystore.properties文件。
    def keystorePropertiesFile = rootProject.file("keystore.properties")
    //初始化一个名为keystoreProperties的新Properties（）对象
    def keystoreProperties = new Properties()
    //将keystore.properties文件加载到keystoreProperties对象中
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

    signingConfigs {
        release {
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
        }
        debug {
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    //buildFeatures 用于在 Android Gradle 插件中启用或禁用特定的构建功能。
    //这些功能可以是 Kotlin、View Binding、Data Binding、Compose 等。它的作用范围更广，不仅仅是 Data Binding。
    buildFeatures{
        dataBinding = true
    }
}

dependencies {
    implementation project(path: ':mvvmkt')
    implementation(libs.core.ktx)
    implementation(libs.appcompat)
    implementation(libs.material)
    implementation(libs.constraintlayout)
    implementation(libs.swiperefreshlayout)
    testImplementation(libs.junit)
    androidTestImplementation(libs.ext.junit)
    androidTestImplementation(libs.espresso.core)

}